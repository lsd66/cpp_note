//////desc：虚析构和纯虚析构
///*
//多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码
//解决方式：将父类中的析构函数改为虚析构或者纯虚析构
//虚析构和纯虚构共性：
//1.可以解决父类指针释放子类对象
//2.都需要有具体的函数实现
//虚析构和纯虚析构区别：
//如果是纯虚析构，该类属于抽象类，无法实例化对象
//虚析构语法：
//virtual ~类名(){}
//纯虚析构语法：
//virtual~类名()=0；
//*/
//////creator:  20210323
//#include<iostream>
//#include<string>
//using namespace std;
//class Animal {
//public:
//	//行为
//	//虚函数 调用不到 改为纯虚函数
//	virtual void speak() = 0;
//	//Cat的构造函数调用
//	Animal() {
//		cout << "Animal的构造函数调用" << endl;
//	}
//	//Cat的析构函数
//	//在父类的析构函数中的析构称为虚析构，可以实现子类创建在堆区的数据的释放
//	//利用虚析构可以解决，父类指针释放子类对象时不干净的问题
//	//virtual ~Animal() {
//	//	cout << "Animal虚析构函数调用" << endl;
//	//}
//
//	//虚析构和纯虚析构不能同时存在
//
//	//如果类内包含一个纯虚析构，这个类是抽象类，不能实例化对象
//	//如果只是类内定义，会被编译器当成一个声明
//	//纯虚析构需要类内声明,类外定义
//	virtual ~Animal() = 0;  
//};
////在类外的话，需要加作用域定义纯虚析构
// Animal::~Animal() {
//	cout << "Animal纯虚析构函数调用" << endl;
//}
//
//class Cat :public Animal {
//public:
//	//子类重写纯虚函数,否则子类也属于抽象类
//	void speak() {
//		cout << *m_name << "在说话" << endl;
//	}
//	//Cat的构造函数调用
//	Cat(string str) {
//		m_name = new string(str); //堆区的数据不会自动释放，需要析构函数手动释放,
//		cout << "Cat的有参构造函数调用" << endl;
//	}
//	//Cat的析构函数定义之后，父类还是不会调用
//	~Cat() {
//		if (m_name != NULL) {
//			cout << "Cat析构函数调用" << endl;
//			delete m_name;
//			//堆区的数据delete后内存空间被释放，但是指针依然保留，为了防止其他大数据对这个失效的指针调用，需要置空
//			m_name = NULL;
//		}		
//	}
//	string *m_name; //子类如果在堆区开辟数据
//};
//void test01() {
//	//父类指针指向子类对象，最后只释放了父类的析构
//	Animal *a = new Cat("Tom"); //堆区开辟数据
//	a->speak();  
//	//a创建在堆区，需要释放
//	//父类指针在析构时候，不会调用子类的析构函数，导致子类如果有堆区属性，出现内存泄漏
//	//delte释放指针时候，会自动调用析构函数，最终释放内存还是要用析构函数
//	delete a;  //这个时候没有调用子类的析构函数，解决方法，用虚析构和纯虚析构
//}
//int main() {
//	test01();
//	return 0;
//}
///*
//总结：
//1.虚析构或纯虚析构就是用来解决通过父类释放子类对象
//2.如果子类中没有堆区数据，可以不写虚析构或纯虚析构
//3.拥有纯虚析构函数的类也属于抽象类
//*/